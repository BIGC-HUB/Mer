[
  "## 登陆\n\n可用数据： 头像 昵称 省份\n\n```js\nwx.request({\n    url: that.globalData.host + '/login',\n    data: {\n        // 微信code\n        wxcode: code,\n        // 微信rawdata\n        rawdata: res.rawData,\n    },\n    method: \"POST\",\n    header: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    success: function(res) {\n        console.log(res)\n        wx.setStorageSync('ucloudtech_3rd_key', res.data.session_key)\n    },\n    fail: function(err) {\n        console.log(err)\n    },\n})\n```",
  "## [路径规划](http://lbs.amap.com/api/webservice/guide/api/direction#driving)\n\n下方策略仅返回一条路径规划结果\n0，会考虑路况，选择时间最短的策略\n1，费用优先（不走收费路段的最快道路）\n2，距离优先\n3，不走快速路\n4，躲避拥堵\n5，多策略（同时使用速度优先、费用优先、距离优先三个策略计算路径）。其中必须说明，就算使用三个策略算路，会根据路况不固定的返回一~三条路径规划信息。\n6，不走高速\n7，不走高速且避免收费\n8，躲避收费和拥堵\n9，不走高速且躲避收费和拥堵 \n\n下方策略返回多条路径规划结果\n10，返回结果会躲避拥堵\n11，返回结果时间最短，距离最短 （由于有更优秀的算法，建议不使用此值）\n12，返回的结果考虑路况，尽量躲避拥堵而规划路径，与高德地图的“躲避拥堵”策略一致\n13，返回的结果不走高速，与高德地图“不走高速”策略一致\n14，返回的结果尽可能规划收费较低甚至免费的路径，与高德地图“避免收费”策略一致\n15，返回的结果考虑路况，尽量躲避拥堵而规划路径，并且不走高速，与高德地图的“躲避拥堵&不走高速”策略一致\n16，返回的结果尽量不走高速，并且尽量规划收费较低甚至免费的路径结果，与高德地图的“避免收费&不走高速”策略一致\n17，返回路径规划结果会尽量的躲避拥堵，并且规划收费较低甚至免费的路径结果，与高德地图的“躲避拥堵&避免收费”策略一致\n18，返回的结果尽量躲避拥堵，规划收费较低甚至免费的路径结果，并且尽量不走高速路，与高德地图的“避免拥堵&避免收费&不走高速”策略一致\n19，返回的结果会优先选择高速路，与高德地图的“高速优先”策略一致\n20，返回的结果会优先考虑高速路，并且会考虑路况躲避拥堵，与高德地图的“躲避拥堵&高速优先”策略一致\n\n```javascript\nwx.request({\n    url: app.globalData.host + '/traffic/route',\n    data: {\n        // 当前位置\n        myorigin: \"104.069191,30.625042\",\n        // 出发点\n        lat: 104.058375,\n        lon: 30.627986,\n        // origin: \"104.058375,30.627986\",\n        // 目的地\n        destination: \"104.058697,30.632546\"\n    },\n    method: 'GET',\n    header: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"ucloudtech_3rd_key\": key\n\n    },\n    success: function(res) {\n        console.log(res)\n    },\n    fail: function(err) {\n        console.log(err)\n    }\n})\n```",
  "## 躲避拥堵路径规划\n\n\n```js\nwx.request({\n    url: 'http://192.168.1.126:1337/traffic/situation',\n    data: {\n        // 之前花费的总时间\n        time: \"6000\",\n        // 当前位置\n        myorigin: \"104.069191,30.625042\",\n        // 出发点\n        lat: 104.058375,\n        lon: 30.627986,\n        // origin: \"104.058375,30.627986\",\n        // 目的地\n        destination: \"104.058697,30.632546\"\n    },\n    method: \"GET\",\n    header: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"ucloudtech_3rd_key\": key\n    },\n    success: function(res) {\n        console.log(res)\n    }\n});\n```\n返回\n```js\n{\n    \"code\": \"200\",\n    \"newtime\": 420, // 时间\n    \"newdistance\": 1671, //距离\n    \"info\": [\n        // {高德 route字段返回}\n    ],\n    point:[{\n    level:1\n    lat:33.123456,\n    lon:107:123456\n    }]\n}\n```",
  "## 上传数据\n\n```js\nvar location = '{ \"type\": \"Point\",\"coordinates\": [' + [that.data.longitudeValue, that.data.latitudeValue] + ']}'\nvar data = {\n    // 拥堵程度\n    traffic: that.data.trafficValue,\n    think: that.data.existfuckshitValue,\n    // 用户自定义数据\n    custom: that.data.contentValue,\n    // 经纬度\n    location: location,\n    // 城市\n    city: that.data.city,\n    district: that.data.district,\n    nation: that.data.nation,\n    province: that.data.province,\n    // 街道\n    street: that.data.street,\n    // 街道数\n    street_number: that.data.street_number,\n    // 拥堵原因\n    reason: that.data.reason,\n    // 登录时返回的 session_key\n    user_id: key,\n    // 当前的时间 毫秒\n    data: Date.now(),\n    delay: that.data.delay_time\n}\nwx.request({\n    // url: app.globalData.host + '/secondpage/collect',\n    url: app.globalData.host + '/info/save',\n    data: data,\n    method: 'POST',\n    header: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"ucloudtech_3rd_key\": key\n    },\n    success: function(res) {\n        if (res.data.code == 100) {\n            console.log('todo')\n            setTimeout(that.tojumb, 3000);\n        } else {\n            that.setData({\n                loading: false,\n                disabled: false,\n            });\n        }\n    },\n    fail: function(err) {\n        console.log(err)\n    }\n})\n```"
]